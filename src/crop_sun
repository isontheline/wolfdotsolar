#!/usr/bin/env python3

import glob
import argparse
import modules.FindSunCoordinates as FSC
import cv2
import os
import piexif
from tqdm import tqdm
from PIL import Image

parser = argparse.ArgumentParser()
parser.add_argument("job_pathPattern", help="The directory pattern where your Sun pictures will be cropped from")
parser.add_argument("-t", "--threshold", help="Threshold of min pixel value to consider as part of the solar disk", type=int, default=50)
parser.add_argument("-m", "--margin", help="Margin around the Solar Limb", type=int, default=50)
parser.add_argument("-d", "--destination", help="Destination subfolder", default="wolfdotsolar")
args = parser.parse_args()

filenames_list = glob.glob(args.job_pathPattern)

if len(filenames_list) == 0:
    raise RuntimeError("Directory pattern '%s' doesn't return any files" %args.job_pathPattern)

job_root_path = os.path.abspath(os.path.join(filenames_list[0], os.pardir))
job_path = args.destination

if not job_path.startswith("/"):
    job_path = os.path.join(job_root_path, args.destination)

if not os.path.isdir(job_path):
    os.makedirs(job_path)

max_radius = 0
sun_coordinates = []

# Finding Sun Coordinates :
progress_bar_find = tqdm(total=len(filenames_list), desc="Finding Sun Coordinates".ljust(40, " "), unit="image", ascii=False, colour="blue")
progress_bar_find.update(0)
for image_file in filenames_list:
    center, radius = FSC.find_disk_in_image_file(image_file=image_file, threshold=args.threshold)
    sun_coordinates.append({ "file": image_file, "center": center })
    progress_bar_find.set_postfix(file=image_file)
    progress_bar_find.update(1)
    if radius > max_radius:
        max_radius = radius
progress_bar_find.colour = "green"
progress_bar_find.set_postfix(None)
progress_bar_find.close()

# Cropping Sun Images :
progress_bar_crop = tqdm(total=len(filenames_list), position=1, desc="Cropping Sun Images".ljust(40, " "), unit="image", ascii=False, colour="blue")
progress_bar_crop.update(0)
for sun_coordinate in sun_coordinates:
    file_path = sun_coordinate["file"]
    img = cv2.imread(file_path)
    radius = max_radius + args.margin
    x_center = sun_coordinate["center"][0]
    y_center = sun_coordinate["center"][1]
    x = round(x_center - radius)
    y = round(y_center - radius)
    # Cropping image :
    crop_img = img[y:y+radius*2, x:x+radius*2]
    crop_img_filename = os.path.splitext(os.path.basename(file_path))[0] + ".png"
    crop_img_path = os.path.join(job_path, crop_img_filename)
    # Writing cropped image :
    cv2.imwrite(crop_img_path, crop_img)
    # Copying EXIF data :
    im_src = Image.open(file_path)
    exif_dict = piexif.load(im_src.info["exif"])
    exif_bytes = piexif.dump(exif_dict)
    im_dst = Image.open(crop_img_path)
    im_dst.save(crop_img_path, "png", exif=exif_bytes)
    # Setting creation / modification date on cropped image :
    imageTimestamp = os.path.getmtime(file_path)
    os.utime(crop_img_path, (imageTimestamp, imageTimestamp))
    # Updating progress bar :
    progress_bar_crop.set_postfix(file=file_path)
    progress_bar_crop.update(1)
progress_bar_crop.colour = "green"
progress_bar_crop.set_postfix(None)
progress_bar_crop.close()